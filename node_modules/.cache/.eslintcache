[{"/home/jbrooks/Documents/GitHub/Podcast-App/podcast-app/src/index.js":"1","/home/jbrooks/Documents/GitHub/Podcast-App/podcast-app/src/reportWebVitals.js":"2","/home/jbrooks/Documents/GitHub/Podcast-App/podcast-app/src/App.js":"3","/home/jbrooks/Documents/GitHub/Podcast-App/podcast-app/src/PodcastPlayer.js":"4","/home/jbrooks/Documents/GitHub/Podcast-App/podcast-app/src/AudioPlayer.jsx":"5","/home/jbrooks/Documents/GitHub/Podcast-App/podcast-app/src/AudoControls.jsx":"6"},{"size":535,"mtime":1661825017391,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1661825017391,"results":"9","hashOfConfig":"8"},{"size":4607,"mtime":1663479380546,"results":"10","hashOfConfig":"8"},{"size":1959,"mtime":1663478136955,"results":"11","hashOfConfig":"8"},{"size":9741,"mtime":1663479328187,"results":"12","hashOfConfig":"8"},{"size":2521,"mtime":1663396808018,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nxhz50",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":1,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"/home/jbrooks/Documents/GitHub/Podcast-App/podcast-app/src/index.js",[],[],"/home/jbrooks/Documents/GitHub/Podcast-App/podcast-app/src/reportWebVitals.js",[],[],"/home/jbrooks/Documents/GitHub/Podcast-App/podcast-app/src/App.js",["36","37"],[],"import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport React, { useState } from \"react\";\nimport PodcastPlayer from \"./PodcastPlayer\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nfunction App() {\n  const [rssFeed, setRssFeed] = useState(\n    \"https://anchor.fm/s/2fa50a94/podcast/rss\"\n  );\n  const [rssList, setRssList] = useState({\n    feeds: [\n      { name: \"The WAN Show\", url: \"https://anchor.fm/s/3cbbb3b8/podcast/rss\" },\n      {\n        name: \"Valuetainment\",\n        url: \"https://anchor.fm/s/2714310c/podcast/rss\",\n      },\n      { name: \"PBD Podcast\", url: \"https://anchor.fm/s/2fa50a94/podcast/rss\" },\n      {\n        name: \"Darknet Diaries\",\n        url: \"https://feeds.megaphone.fm/darknetdiaries\",\n      },\n      {\n        name: \"Political Theory 101\",\n        url: \"https://cors-anywhere.herokuapp.com/https://feeds.soundcloud.com/users/soundcloud:users:607750389/sounds.rss\",\n      },\n    ],\n  });\n  const [tempRSSName, setTempRSSName] = useState();\n  const [tempRSSURL, setTempRSSURL] = useState();\n  const [showRSSInput, setShowRSSInput] = useState(false);\n  const [showSavedPodcasts, setShowSavedPodcasts] = useState(false);\n\n  const handleCloseRSSInput = () => setShowRSSInput(false);\n  const handleShowRSSInput = () => setShowRSSInput(true);\n  const handleCloseSaved = () => setShowSavedPodcasts(false);\n  const handleShowSaved = () => setShowSavedPodcasts(true);\n\n  const handleAddFeed = (event) => {\n    event.preventDefault();\n    const newRssList = rssList;\n    newRssList.feeds = [\n      ...newRssList.feeds,\n      { name: tempRSSName, url: tempRSSURL },\n    ];\n    setRssList(newRssList);\n  };\n\n  const handleLoadFeedClick = (inputRssFeed) => {\n    setRssFeed(inputRssFeed);\n  };\n\n  const handleInputChange = (event) => {\n    if (event.target.id == \"rssFeedName\") {\n      setTempRSSName(event.target.value);\n      console.log(tempRSSName);\n    }\n    if (event.target.id == \"rssFeedUrl\") {\n      setTempRSSURL(event.target.value);\n      console.log(tempRSSURL);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-controller\">\n        <Button variant=\"primary\" onClick={handleShowRSSInput}>\n          Add New Podcast\n        </Button>\n        <Modal show={showRSSInput} onHide={handleCloseRSSInput}>\n          <Modal.Header closeButton>\n            <Modal.Title>Add A Podcast</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <form onSubmit={(e) => handleAddFeed(e)}>\n              <label htmlFor=\"rssFeedUrl\">RSS Feed Name:</label>\n              <input\n                type=\"text\"\n                id=\"rssFeedName\"\n                name=\"rssFeedUrl\"\n                style={{ width: \"80%\" }}\n                value={tempRSSName}\n                onChange={(e) => handleInputChange(e)}\n              />\n              <label htmlFor=\"rssFeedUrl\">RSS Feed URL:</label>\n              <input\n                type=\"text\"\n                id=\"rssFeedUrl\"\n                name=\"rssFeedUrl\"\n                style={{ width: \"80%\" }}\n                value={tempRSSURL}\n                onChange={(e) => setTempRSSURL(e.target.value)}\n              />\n              <Button\n                variant=\"secondary\"\n                type=\"submit\"\n                value=\"Add Feed\"\n                onClick={handleCloseRSSInput}\n              >\n                Add Feed\n              </Button>\n            </form>\n          </Modal.Body>\n          <Modal.Footer></Modal.Footer>\n        </Modal>\n\n        <Button variant=\"primary\" onClick={handleShowSaved}>\n          Saved Podcasts\n        </Button>\n        <Modal show={showSavedPodcasts} onHide={handleCloseSaved}>\n          <Modal.Header closeButton>\n            <Modal.Title>Saved Podcasts</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <div className=\"saved-podcasts\">\n              {rssList.feeds.map(({ name, url }) => (\n                <Button\n                  className=\"saved-podcast-button\"\n                  variant=\"primary\"\n                  value={url}\n                  onClick={(e) => {\n                    handleLoadFeedClick(e.target.value);\n                    handleCloseSaved();\n                  }}\n                >\n                  {name}\n                </Button>\n              ))}\n            </div>\n          </Modal.Body>\n          <Modal.Footer></Modal.Footer>\n        </Modal>\n      </div>\n\n      {\n        // <PodcastGrid rssfeed={rssFeed} height=\"50vh\" weight=\"100%\"></PodcastGrid>\n      }\n      <PodcastPlayer rssfeed={rssFeed}></PodcastPlayer>\n    </div>\n  );\n}\n\nexport default App;\n","/home/jbrooks/Documents/GitHub/Podcast-App/podcast-app/src/PodcastPlayer.js",["38","39","40"],[],"import React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\nimport AudioPlayer from \"./AudioPlayer\";\n\nfunction PodcastPlayer(props) {\n  const [playerState, setPlayerState] = useState([]);\n  const [metaData, setMetaData] = useState({});\n\n  useEffect(() => {\n    fetch(props.rssfeed)\n      .then((response) => response.text())\n      .then((str) => new window.DOMParser().parseFromString(str, \"text/xml\"))\n      .then((data) => {\n        const tempMetaData = {};\n        tempMetaData.channelImage = data.querySelector(\"image\").children[0]\n          ? (tempMetaData.channelImage =\n              data.querySelector(\"image\").children[0].innerHTML)\n          : (tempMetaData.channelImage =\n              data.querySelector(\"image\").attributes.href.value);\n        tempMetaData.channelTitle = data.querySelector(\"image\").children[1]\n          ? data.querySelector(\"image\").children[1].innerHTML\n          : data.querySelector(\"title\").innerHTML;\n        tempMetaData.channelLink = data.querySelector(\"link\").attributes.href\n          ? data.querySelector(\"link\").attributes.href.value\n          : data.querySelector(\"image\").children[2].innerHTML;\n\n        const itemList = data.querySelectorAll(\"item\");\n        let html = ``;\n        const items = [];\n        itemList.forEach((e) => {\n          items.push({\n            pubDate: new Date(e.querySelector(\"pubDate\").textContent),\n            title: e.querySelector(\"title\").textContent,\n            sourceAudio: e.querySelector(\"enclosure\").getAttribute(\"url\"),\n            description: e.querySelector(\"description\").textContent,\n            episodeImage: e.querySelector(\"image\").attributes.href.value,\n          });\n        });\n        setMetaData(tempMetaData);\n        setPlayerState(items);\n      });\n  }, [props.rssfeed]);\n\n  return playerState.length >= 1 ? (\n    <AudioPlayer episodes={playerState} metaData={metaData} />\n  ) : (\n    \"Player loading\"\n  );\n}\n\nexport default PodcastPlayer;\n","/home/jbrooks/Documents/GitHub/Podcast-App/podcast-app/src/AudioPlayer.jsx",["41","42","43","44","45","46","47","48","49","50","51","52"],[],"import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\n\nconst AudioPlayer = ({ episodes, metaData }) => {\n\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [runTime, setRunTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgressIndex, setPersistProgressIndex] = useState(Number);\n  const [persistProgress, setPersistProgress] = useState([]);\n  const [showHistory, setShowhistory] = useState(false);\n  const [showAboutEpisode, setShowAboutEpisode] = useState(false);\n\n  let { title, episodeImage, sourceAudio, description, pubDate } =\n    episodes[episodeIndex];\n  const { channelImage, channelTitle, channelLink } = metaData;\n\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  const handleCloseHistory = () => setShowhistory(false);\n  const handleShowHistory = () => setShowhistory(true);\n  const handleCloseAboutEpisode = () => setShowAboutEpisode(false);\n  const handleShowAboutEpisode = () => setShowAboutEpisode(true);\n\n  const { duration } = audioRef.current;\n\n  const converToPercentage = () => {\n    let temp = (episodeProgress / duration) * 100;\n\n    return temp;\n  };\n  const currentPercentage = duration ? `${converToPercentage}%` : \"0%\";\n\n  const cleanCurrentPercentage = duration ? converToPercentage().toString() : 0;\n\n  const remaining = duration\n    ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19)\n    : \"\";\n\n  const tempRunTime = duration\n    ? new Date(duration * 1000).toISOString().slice(11, -5)\n    : \"Ready\";\n\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #777), color-stop(${currentPercentage}, #FFF))\n  `;\n\n  function findPersistIndex() {\n    const index = persistProgress.findIndex((object) => {\n      return object.sourceAudio === sourceAudio;\n    });\n\n    setPersistProgressIndex(index);\n\n    if (index == -1) {\n      setPersistProgress([\n        ...persistProgress,\n        {\n          title,\n          channelTitle,\n          channelImage,\n          episodeImage,\n          sourceAudio,\n          episodeProgress: 0,\n          cleanCurrentPercentage,\n        },\n      ]);\n    }\n\n    return index;\n  }\n\n  const toNextEpisode = () => {\n    setIsPlaying(false);\n\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.length - 1);\n      setEpisodeProgress(0);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n      setEpisodeProgress(0);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    setIsPlaying(false);\n\n    isReady.current = false;\n\n    if (episodeIndex < episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    findPersistIndex();\n\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        setIsPlaying(false);\n      } else {\n        const tempUpdatedPersist = persistProgress;\n        findPersistIndex();\n        tempUpdatedPersist[persistProgressIndex].episodeProgress =\n          audioRef.current.currentTime;\n        tempUpdatedPersist[persistProgressIndex].currentPercentage =\n          cleanCurrentPercentage;\n        setPersistProgress(tempUpdatedPersist);\n\n        setRemainingTime(remaining);\n        setEpisodeProgress(\n          persistProgress[persistProgressIndex].episodeProgress\n        );\n      }\n    }, [1000]);\n  };\n\n  const onScrub = (value) => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    const tempUpdatedPersist = persistProgress;\n    tempUpdatedPersist[persistProgressIndex].episodeProgress = value;\n    setRemainingTime(remaining);\n    setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n\n    setPersistProgress(tempUpdatedPersist);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    setEpisodeIndex(0);\n  }, [episodes]);\n\n  useEffect(() => {\n    const trackUpdateRemaining = duration\n      ? new Date((duration - episodeProgress) * 1000)\n          .toISOString()\n          .slice(11, 19)\n      : \"\";\n\n    const tempRunTime = duration\n      ? new Date(duration * 1000).toISOString().slice(11, -5)\n      : \"Ready\";\n\n    setRemainingTime(trackUpdateRemaining);\n    setRunTime(tempRunTime);\n    setEpisodeProgress(0);\n  }, [duration]);\n\n  useEffect(() => {\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime =\n        persistProgress[checkIndex].episodeProgress;\n    }\n  }, [episodeIndex, audioRef.current]);\n\n  useEffect(() => {\n    setRunTime(tempRunTime);\n    if (isPlaying) {\n      audioRef.current.play();\n\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  });\n\n  useEffect(() => {\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  });\n\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio);\n    setPlaybackRate(1);\n\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime =\n        persistProgress[checkIndex].episodeProgress;\n      setRunTime(tempRunTime);\n    }\n\n    findPersistIndex();\n\n    if (isReady.current) {\n      audioRef.current.pause();\n      setIsPlaying(false);\n\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes]);\n\n  return (\n    <div className=\"podcast-player\">\n      <div className=\"podcast-player-inner\">\n        <div className=\"episode-info\">\n          <img\n            className=\"episode-poster\"\n            src={episodeImage}\n            alt={`Poster for ${title} episode by ${channelTitle}`}\n          />\n          <h3 className=\"episode-title\">{title}</h3>\n          <h3 className=\"author-text\">{channelTitle}</h3>\n\n          <input\n            type=\"range\"\n            value={episodeProgress}\n            step=\"1\"\n            min=\"0\"\n            max={duration ? duration : `${duration}`}\n            className=\"progress\"\n            onChange={(e) => onScrub(e.target.value)}\n            onMouseUp={onScrubEnd}\n            onKeyUp={onScrubEnd}\n            style={{ background: trackStyling }}\n          />\n          <div className=\"runtime-display\">\n            <p>{remainingTime ? remainingTime : \"\"}</p>\n            <p>{runTime}</p>\n          </div>\n          <AudioControls\n            isPlaying={isPlaying}\n            onPrevClick={toPrevEpisode}\n            onNextClick={toNextEpisode}\n            onPlayPauseClick={setIsPlaying}\n            showNextButton={episodeIndex != 0}\n            changeSpeed={setPlaybackRate}\n          />\n        </div>\n        <div className=\"podcast-history-modal\">\n          <div className=\"podcast-footer\">\n            <Button variant=\"primary\" onClick={handleShowHistory}>\n              History\n            </Button>\n            <p>playback speed: {playbackRate}x</p>\n            <div\n              className=\"about-episode-button\"\n              onClick={handleShowAboutEpisode}\n              style={{ color: \"white\" }}\n            >\n              <img className=\"channel-image\" src={channelImage} />\n              <br />\n              More Info\n            </div>\n          </div>\n\n          <Modal show={showHistory} onHide={handleCloseHistory}>\n            <Modal.Header closeButton>\n              <Modal.Title>Episode History</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              {persistProgress.map(\n                ({ channelTitle, title, episodeProgress, currentPercentage }) =>\n                  episodeProgress > 0 ? (\n                    <div>\n                      <p>\n                        {channelTitle} - {title} Played:{\" \"}\n                        {new Date(episodeProgress * 1000)\n                          .toISOString()\n                          .slice(11, -5)}{\" \"}\n                        {currentPercentage < 10\n                          ? currentPercentage.slice(0, 3)\n                          : currentPercentage.slice(0, 4)}\n                        %\n                      </p>\n                    </div>\n                  ) : (\n                    \"\"\n                  )\n              )}\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={handleCloseHistory}>\n                Close History\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </div>\n      </div>\n      <Offcanvas show={showAboutEpisode} onHide={handleCloseAboutEpisode}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>About This Episode</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <h4>{title}</h4>\n          <p>Published: {pubDate.toString()}</p>\n          <br />\n          <br />\n          <div dangerouslySetInnerHTML={{ __html: description }}></div>\n          <br />\n          <br />\n          <a href={channelLink} target=\"_blank\">\n            {channelLink}\n          </a>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n","/home/jbrooks/Documents/GitHub/Podcast-App/podcast-app/src/AudoControls.jsx",["53","54"],[],"import React from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport {\n  BsPlayCircleFill as Play,\n  BsFillPauseCircleFill as Pause,\n} from \"react-icons/bs\";\n\nimport { BiSkipNext as Next, BiSkipPrevious as Prev } from \"react-icons/bi\";\nimport { RiSpeedFill as Speed } from \"react-icons/ri\";\n\nconst AudioControls = ({\n  isPlaying,\n  onPlayPauseClick,\n  onPrevClick,\n  onNextClick,\n  showNextButton,\n  changeSpeed,\n}) => (\n  <div className=\"audio-controls\">\n    <button\n      type=\"button\"\n      className=\"prev\"\n      aria-label=\"Previous\"\n      onClick={onPrevClick}\n    >\n      <Prev />\n    </button>\n    {isPlaying ? (\n      <button\n        type=\"button\"\n        className=\"pause\"\n        onClick={() => onPlayPauseClick(false)}\n        aria-label=\"Pause\"\n      >\n        <Pause />\n      </button>\n    ) : (\n      <button\n        type=\"button\"\n        className=\"play\"\n        onClick={() => onPlayPauseClick(true)}\n        aria-label=\"Play\"\n      >\n        <Play />\n      </button>\n    )}\n    <button\n      type=\"button\"\n      className=\"next\"\n      aria-label=\"Next\"\n      onClick={onNextClick}\n    >\n      <Next />\n    </button>\n    <br />\n    <br />\n\n    <Dropdown drop=\"up\">\n      <Dropdown.Toggle variant=\"dark\" id=\"speed-selector\">\n        <a>\n          <h5 className=\"speed\">{\">>\"}</h5>\n        </a>\n      </Dropdown.Toggle>\n      <Dropdown.Menu>\n        <Dropdown.Item\n          onClick={(e) => changeSpeed(e.target.innerHTML)}\n          value=\"0.5\"\n        >\n          0.5\n        </Dropdown.Item>\n        <Dropdown.Item\n          onClick={(e) => changeSpeed(e.target.innerHTML)}\n          value=\"1\"\n        >\n          1\n        </Dropdown.Item>\n        <Dropdown.Item\n          onClick={(e) => changeSpeed(e.target.innerHTML)}\n          value=\"1.25\"\n        >\n          1.25\n        </Dropdown.Item>\n        <Dropdown.Item\n          onClick={(e) => changeSpeed(e.target.innerHTML)}\n          value=\"1.5\"\n        >\n          1.5\n        </Dropdown.Item>\n        <Dropdown.Item\n          onClick={(e) => changeSpeed(e.target.innerHTML)}\n          value=\"1.75\"\n        >\n          1.75\n        </Dropdown.Item>\n        <Dropdown.Item\n          onClick={(e) => changeSpeed(e.target.innerHTML)}\n          value=\"2\"\n        >\n          2\n        </Dropdown.Item>\n        <Dropdown.Item\n          onClick={(e) => changeSpeed(e.target.innerHTML)}\n          value=\"2.25\"\n        >\n          2.25\n        </Dropdown.Item>\n      </Dropdown.Menu>\n    </Dropdown>\n  </div>\n);\nexport default AudioControls;\n",{"ruleId":"55","severity":1,"message":"56","line":55,"column":25,"nodeType":"57","messageId":"58","endLine":55,"endColumn":27},{"ruleId":"55","severity":1,"message":"56","line":59,"column":25,"nodeType":"57","messageId":"58","endLine":59,"endColumn":27},{"ruleId":"59","severity":1,"message":"60","line":1,"column":38,"nodeType":"61","messageId":"62","endLine":1,"endColumn":44},{"ruleId":"59","severity":1,"message":"63","line":1,"column":46,"nodeType":"61","messageId":"62","endLine":1,"endColumn":61},{"ruleId":"59","severity":1,"message":"64","line":27,"column":13,"nodeType":"61","messageId":"62","endLine":27,"endColumn":17},{"ruleId":"55","severity":1,"message":"56","line":63,"column":15,"nodeType":"57","messageId":"58","endLine":63,"endColumn":17},{"ruleId":"65","severity":1,"message":"66","line":166,"column":6,"nodeType":"67","endLine":166,"endColumn":16,"suggestions":"68"},{"ruleId":"55","severity":1,"message":"69","line":171,"column":20,"nodeType":"57","messageId":"58","endLine":171,"endColumn":22},{"ruleId":"55","severity":1,"message":"69","line":171,"column":40,"nodeType":"57","messageId":"58","endLine":171,"endColumn":42},{"ruleId":"65","severity":1,"message":"70","line":176,"column":6,"nodeType":"67","endLine":176,"endColumn":38,"suggestions":"71"},{"ruleId":"65","severity":1,"message":"72","line":178,"column":3,"nodeType":"61","endLine":178,"endColumn":12,"suggestions":"73"},{"ruleId":"55","severity":1,"message":"69","line":206,"column":20,"nodeType":"57","messageId":"58","endLine":206,"endColumn":22},{"ruleId":"55","severity":1,"message":"69","line":206,"column":40,"nodeType":"57","messageId":"58","endLine":206,"endColumn":42},{"ruleId":"65","severity":1,"message":"74","line":223,"column":6,"nodeType":"67","endLine":223,"endColumn":30,"suggestions":"75"},{"ruleId":"55","severity":1,"message":"69","line":258,"column":42,"nodeType":"57","messageId":"58","endLine":258,"endColumn":44},{"ruleId":"76","severity":1,"message":"77","line":273,"column":15,"nodeType":"78","endLine":273,"endColumn":67},{"ruleId":"79","severity":1,"message":"80","line":324,"column":11,"nodeType":"78","messageId":"81","endLine":324,"endColumn":49,"fix":"82"},{"ruleId":"59","severity":1,"message":"83","line":9,"column":25,"nodeType":"61","messageId":"62","endLine":9,"endColumn":30},{"ruleId":"84","severity":1,"message":"85","line":60,"column":9,"nodeType":"78","endLine":60,"endColumn":12},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useLayoutEffect' is defined but never used.","'html' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'episodeProgress'. Either include it or remove the dependency array.","ArrayExpression",["86"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'findPersistIndex' and 'persistProgress'. Either include them or remove the dependency array. Mutable values like 'audioRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["87"],"React Hook useEffect contains a call to 'setRunTime'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [tempRunTime, isPlaying, startTimer] as a second argument to the useEffect Hook.",["88"],"React Hook useEffect has missing dependencies: 'findPersistIndex', 'persistProgress', 'sourceAudio', 'startTimer', and 'tempRunTime'. Either include them or remove the dependency array.",["89"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"90","text":"91"},"'Speed' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},[9605,9605]," rel=\"noreferrer\"","Update the dependencies array to be: [duration, episodeProgress]",{"range":"100","text":"101"},"Update the dependencies array to be: [episodeIndex, findPersistIndex, persistProgress]",{"range":"102","text":"103"},"Add dependencies array: [tempRunTime, isPlaying, startTimer]",{"range":"104","text":"105"},"Update the dependencies array to be: [episodeIndex, episodes, findPersistIndex, persistProgress, sourceAudio, startTimer, tempRunTime]",{"range":"106","text":"107"},[4795,4805],"[duration, episodeProgress]",[5072,5104],"[episodeIndex, findPersistIndex, persistProgress]",[5284,5284],", [tempRunTime, isPlaying, startTimer]",[6054,6078],"[episodeIndex, episodes, findPersistIndex, persistProgress, sourceAudio, startTimer, tempRunTime]"]