{"ast":null,"code":"var _jsxFileName = \"/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/AudioPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AudioPlayer(episodes) {\n  _s();\n\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgressIndex, setPersistProgressIndex] = useState();\n  const [persistProgress, setPersistProgress] = useState([]);\n  let {\n    title,\n    author,\n    episodeImage,\n    sourceAudio\n  } = episodes.episodes[episodeIndex];\n\n  function findPersistIndex() {\n    let index = persistProgress.findIndex(object => {\n      return object.sourceAudio === sourceAudio;\n    });\n    setPersistProgressIndex(index);\n  }\n\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  const {\n    duration\n  } = audioRef.current;\n  const currentPercentage = duration ? `${audioRef.current.currentTime / duration * 100}%` : \"0%\";\n  const remaining = duration ? new Date((duration - audioRef.current.currentTime) * 1000).toISOString().slice(11, 19) : \"\";\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #fff), color-stop(${currentPercentage}, #777))\n  `;\n\n  const toNextEpisode = () => {\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.episodes.length - 1);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    if (episodeIndex < episodes.episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        toNextEpisode();\n      } else {\n        const tempUpdatedPersist = persistProgress;\n        tempUpdatedPersist[persistProgressIndex].episodeProgress = audioRef.current.currentTime;\n        setPersistProgress(tempUpdatedPersist);\n        console.log(persistProgressIndex);\n        console.log(persistProgress[persistProgressIndex].episodeProgress);\n      }\n    }, [1000]);\n  };\n\n  const onScrub = value => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    const tempUpdatedPersist = persistProgress;\n    tempUpdatedPersist[persistProgressIndex].episodeProgress = value;\n    setPersistProgress(tempUpdatedPersist);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    findPersistIndex();\n    audioRef.current.currentTime = persistProgress[persistProgressIndex].episodeProgress;\n    console.log(persistProgress[persistProgressIndex]);\n\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying]);\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n    setRemainingTime(remaining);\n  });\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio); //const index = persistProgress.findIndex((object) => {\n    //return object.sourceAudio === sourceAudio});\n\n    findPersistIndex();\n\n    if (persistProgressIndex == -1 || persistProgressIndex == undefined) {\n      setPersistProgress([...persistProgress, {\n        title,\n        author,\n        episodeImage,\n        sourceAudio,\n        episodeProgress: 0\n      }]);\n      findPersistIndex();\n    }\n\n    if (audioRef.waiting) {\n      audioRef.current.play();\n      setIsPlaying(false);\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes.episodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"podcast-player\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"episode-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"episode-poster\",\n        src: episodeImage,\n        alt: `Poster for ${title} episode by ${author}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"episode-title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"author-text\",\n        children: author\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Time Remaining: \", isReady ? remainingTime : \"Media Loading\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        value: episodeProgress,\n        step: \"1\",\n        min: \"0\",\n        max: duration ? duration : `${duration}`,\n        className: \"progress\",\n        onChange: e => onScrub(e.target.value),\n        onMouseUp: onScrubEnd,\n        onKeyUp: onScrubEnd,\n        style: {\n          background: trackStyling\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AudioControls, {\n        isPlaying: isPlaying,\n        onPrevClick: toPrevEpisode,\n        onNextClick: toNextEpisode,\n        onPlayPauseClick: setIsPlaying,\n        showNextButton: episodeIndex != 0,\n        changeSpeed: setPlaybackRate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AudioPlayer, \"ByVjnPnQ8inCkU1WXBv8KaGXC0M=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AudioControls","AudioPlayer","episodes","episodeIndex","setEpisodeIndex","episodeProgress","setEpisodeProgress","isPlaying","setIsPlaying","remainingTime","setRemainingTime","playbackRate","setPlaybackRate","persistProgressIndex","setPersistProgressIndex","persistProgress","setPersistProgress","title","author","episodeImage","sourceAudio","findPersistIndex","index","findIndex","object","audioRef","Audio","intervalRef","isReady","duration","current","currentPercentage","currentTime","remaining","Date","toISOString","slice","trackStyling","toNextEpisode","length","toPrevEpisode","startTimer","clearInterval","setInterval","ended","tempUpdatedPersist","console","log","onScrub","value","onScrubEnd","play","pause","undefined","waiting","e","target","background"],"sources":["/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/AudioPlayer.jsx"],"sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\n\nfunction AudioPlayer(episodes) {\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgressIndex, setPersistProgressIndex] = useState();\n  const [persistProgress, setPersistProgress] = useState([]);\n\n  let { title, author, episodeImage, sourceAudio } =\n    episodes.episodes[episodeIndex];\n\n  function findPersistIndex() {\n    let index = persistProgress.findIndex((object) => {\n      return object.sourceAudio === sourceAudio;\n    });\n\n    setPersistProgressIndex(index);\n  }\n\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n\n  const { duration } = audioRef.current;\n  const currentPercentage = duration\n    ? `${(audioRef.current.currentTime / duration) * 100}%`\n    : \"0%\";\n  const remaining = duration\n    ? new Date((duration - audioRef.current.currentTime) * 1000)\n        .toISOString()\n        .slice(11, 19)\n    : \"\";\n\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #fff), color-stop(${currentPercentage}, #777))\n  `;\n\n  const toNextEpisode = () => {\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.episodes.length - 1);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    if (episodeIndex < episodes.episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        toNextEpisode();\n      } else {\n        const tempUpdatedPersist = persistProgress;\n        tempUpdatedPersist[persistProgressIndex].episodeProgress =\n          audioRef.current.currentTime;\n        setPersistProgress(tempUpdatedPersist);\n        console.log(persistProgressIndex);\n        console.log(persistProgress[persistProgressIndex].episodeProgress);\n      }\n    }, [1000]);\n  };\n\n  const onScrub = (value) => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    const tempUpdatedPersist = persistProgress;\n    tempUpdatedPersist[persistProgressIndex].episodeProgress = value;\n    setPersistProgress(tempUpdatedPersist);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    findPersistIndex();\n    audioRef.current.currentTime =\n      persistProgress[persistProgressIndex].episodeProgress;\n    console.log(persistProgress[persistProgressIndex]);\n    if (isPlaying) {\n      audioRef.current.play();\n\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying]);\n\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n    setRemainingTime(remaining);\n  });\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio);\n\n    //const index = persistProgress.findIndex((object) => {\n    //return object.sourceAudio === sourceAudio});\n\n    findPersistIndex();\n\n    if (persistProgressIndex == -1 || persistProgressIndex == undefined) {\n      setPersistProgress([\n        ...persistProgress,\n        { title, author, episodeImage, sourceAudio, episodeProgress: 0 },\n      ]);\n      findPersistIndex();\n    }\n\n    if (audioRef.waiting) {\n      audioRef.current.play();\n      setIsPlaying(false);\n\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes.episodes]);\n\n  return (\n    <div className=\"podcast-player\">\n      <div className=\"episode-info\">\n        <img\n          className=\"episode-poster\"\n          src={episodeImage}\n          alt={`Poster for ${title} episode by ${author}`}\n        />\n        <h2 className=\"episode-title\">{title}</h2>\n        <h2 className=\"author-text\">{author}</h2>\n        <div>\n          <h3>Time Remaining: {isReady ? remainingTime : \"Media Loading\"}</h3>\n        </div>\n        <input\n          type=\"range\"\n          value={episodeProgress}\n          step=\"1\"\n          min=\"0\"\n          max={duration ? duration : `${duration}`}\n          className=\"progress\"\n          onChange={(e) => onScrub(e.target.value)}\n          onMouseUp={onScrubEnd}\n          onKeyUp={onScrubEnd}\n          style={{ background: trackStyling }}\n        />\n        <AudioControls\n          isPlaying={isPlaying}\n          onPrevClick={toPrevEpisode}\n          onNextClick={toNextEpisode}\n          onPlayPauseClick={setIsPlaying}\n          showNextButton={episodeIndex != 0}\n          changeSpeed={setPlaybackRate}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default AudioPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}