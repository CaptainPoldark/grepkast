{"ast":null,"code":"var _jsxFileName = \"/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/PodcastPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\nimport AudioPlayer from \"./AudioPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PodcastPlayer(props) {\n  _s();\n\n  const [playerState, setPlayerState] = useState([]);\n  let ChannelName = \"\";\n  let channelImage = \"\";\n  const metaData = {\n    title: channelName,\n    channelImage: channelImage\n  };\n  useEffect(() => {\n    fetch(props.rssfeed).then(response => response.text()).then(str => new window.DOMParser().parseFromString(str, \"text/xml\")).then(data => {\n      console.log(data);\n      channelImage = data.querySelector(\"image\").children[0].innerHTML;\n      console.log(data.querySelector(\"image\").children[0].innerHTML);\n      channelName = data.querySelector(\"title\").innerHTML;\n      console.log(data.querySelector(\"title\").innerHTML);\n      const itemList = data.querySelectorAll(\"item\");\n      let html = ``;\n      const items = [];\n      itemList.forEach(e => {\n        items.push({\n          pubDate: new Date(e.querySelector(\"pubDate\").textContent),\n          title: e.querySelector(\"title\").textContent,\n          sourceAudio: e.querySelector(\"enclosure\").getAttribute(\"url\"),\n          description: e.querySelector(\"description\").textContent,\n          episodeImage: e.querySelector(\"image\").attributes.href.value\n        });\n      });\n      setPlayerState(items);\n    });\n  }, [props.rssfeed]);\n  console.log(playerState);\n  return playerState.length >= 1 ? /*#__PURE__*/_jsxDEV(AudioPlayer, {\n    episodes: playerState,\n    metaData: metaData\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this) : \"Player loading\";\n}\n\n_s(PodcastPlayer, \"kZNTeTlCHh/gNux06XbpIt4+Z7k=\");\n\n_c = PodcastPlayer;\nexport default PodcastPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"PodcastPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useLayoutEffect","AudioPlayer","PodcastPlayer","props","playerState","setPlayerState","ChannelName","channelImage","metaData","title","channelName","fetch","rssfeed","then","response","text","str","window","DOMParser","parseFromString","data","console","log","querySelector","children","innerHTML","itemList","querySelectorAll","html","items","forEach","e","push","pubDate","Date","textContent","sourceAudio","getAttribute","description","episodeImage","attributes","href","value","length"],"sources":["/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/PodcastPlayer.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\nimport AudioPlayer from \"./AudioPlayer\";\n\nfunction PodcastPlayer(props) {\n  const [playerState, setPlayerState] = useState([]);\n  let ChannelName = \"\";\n  let channelImage = \"\";\n  const metaData = { title: channelName, channelImage: channelImage };\n\n  useEffect(() => {\n    fetch(props.rssfeed)\n      .then((response) => response.text())\n      .then((str) => new window.DOMParser().parseFromString(str, \"text/xml\"))\n      .then((data) => {\n        console.log(data);\n        channelImage = data.querySelector(\"image\").children[0].innerHTML;\n        console.log(data.querySelector(\"image\").children[0].innerHTML);\n        channelName = data.querySelector(\"title\").innerHTML;\n        console.log(data.querySelector(\"title\").innerHTML);\n        const itemList = data.querySelectorAll(\"item\");\n        let html = ``;\n        const items = [];\n        itemList.forEach((e) => {\n          items.push({\n            pubDate: new Date(e.querySelector(\"pubDate\").textContent),\n            title: e.querySelector(\"title\").textContent,\n            sourceAudio: e.querySelector(\"enclosure\").getAttribute(\"url\"),\n            description: e.querySelector(\"description\").textContent,\n            episodeImage: e.querySelector(\"image\").attributes.href.value,\n          });\n        });\n\n        setPlayerState(items);\n      });\n  }, [props.rssfeed]);\n\n  console.log(playerState);\n\n  return playerState.length >= 1 ? (\n    <AudioPlayer episodes={playerState} metaData={metaData} />\n  ) : (\n    \"Player loading\"\n  );\n}\n\nexport default PodcastPlayer;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,EAA6CC,eAA7C,QAAoE,OAApE;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;EAAA;;EAC5B,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;EACA,IAAIS,WAAW,GAAG,EAAlB;EACA,IAAIC,YAAY,GAAG,EAAnB;EACA,MAAMC,QAAQ,GAAG;IAAEC,KAAK,EAAEC,WAAT;IAAsBH,YAAY,EAAEA;EAApC,CAAjB;EAEAT,SAAS,CAAC,MAAM;IACda,KAAK,CAACR,KAAK,CAACS,OAAP,CAAL,CACGC,IADH,CACSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGF,IAFH,CAESG,GAAD,IAAS,IAAIC,MAAM,CAACC,SAAX,GAAuBC,eAAvB,CAAuCH,GAAvC,EAA4C,UAA5C,CAFjB,EAGGH,IAHH,CAGSO,IAAD,IAAU;MACdC,OAAO,CAACC,GAAR,CAAYF,IAAZ;MACAb,YAAY,GAAGa,IAAI,CAACG,aAAL,CAAmB,OAAnB,EAA4BC,QAA5B,CAAqC,CAArC,EAAwCC,SAAvD;MACAJ,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,aAAL,CAAmB,OAAnB,EAA4BC,QAA5B,CAAqC,CAArC,EAAwCC,SAApD;MACAf,WAAW,GAAGU,IAAI,CAACG,aAAL,CAAmB,OAAnB,EAA4BE,SAA1C;MACAJ,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,aAAL,CAAmB,OAAnB,EAA4BE,SAAxC;MACA,MAAMC,QAAQ,GAAGN,IAAI,CAACO,gBAAL,CAAsB,MAAtB,CAAjB;MACA,IAAIC,IAAI,GAAI,EAAZ;MACA,MAAMC,KAAK,GAAG,EAAd;MACAH,QAAQ,CAACI,OAAT,CAAkBC,CAAD,IAAO;QACtBF,KAAK,CAACG,IAAN,CAAW;UACTC,OAAO,EAAE,IAAIC,IAAJ,CAASH,CAAC,CAACR,aAAF,CAAgB,SAAhB,EAA2BY,WAApC,CADA;UAET1B,KAAK,EAAEsB,CAAC,CAACR,aAAF,CAAgB,OAAhB,EAAyBY,WAFvB;UAGTC,WAAW,EAAEL,CAAC,CAACR,aAAF,CAAgB,WAAhB,EAA6Bc,YAA7B,CAA0C,KAA1C,CAHJ;UAITC,WAAW,EAAEP,CAAC,CAACR,aAAF,CAAgB,aAAhB,EAA+BY,WAJnC;UAKTI,YAAY,EAAER,CAAC,CAACR,aAAF,CAAgB,OAAhB,EAAyBiB,UAAzB,CAAoCC,IAApC,CAAyCC;QAL9C,CAAX;MAOD,CARD;MAUArC,cAAc,CAACwB,KAAD,CAAd;IACD,CAvBH;EAwBD,CAzBQ,EAyBN,CAAC1B,KAAK,CAACS,OAAP,CAzBM,CAAT;EA2BAS,OAAO,CAACC,GAAR,CAAYlB,WAAZ;EAEA,OAAOA,WAAW,CAACuC,MAAZ,IAAsB,CAAtB,gBACL,QAAC,WAAD;IAAa,QAAQ,EAAEvC,WAAvB;IAAoC,QAAQ,EAAEI;EAA9C;IAAA;IAAA;IAAA;EAAA,QADK,GAGL,gBAHF;AAKD;;GAxCQN,a;;KAAAA,a;AA0CT,eAAeA,aAAf"},"metadata":{},"sourceType":"module"}