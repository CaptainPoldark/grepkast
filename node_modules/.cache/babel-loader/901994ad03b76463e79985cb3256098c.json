{"ast":null,"code":"var _jsxFileName = \"/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/AudioPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioPlayer = (episodes, channelData) => {\n  _s();\n\n  console.log(channelData);\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [runTime, setRunTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgressIndex, setPersistProgressIndex] = useState(Number);\n  const [persistProgress, setPersistProgress] = useState([]);\n  const [showHistory, setShowhistory] = useState(false);\n  let {\n    title,\n    episodeImage,\n    sourceAudio\n  } = episodes.episodes[episodeIndex];\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n\n  const handleCloseHistory = () => setShowhistory(false);\n\n  const handleShowHistory = () => setShowhistory(true);\n\n  const {\n    duration\n  } = audioRef.current;\n  const currentPercentage = duration ? `${episodeProgress / duration * 100}%` : \"0%\";\n  const remaining = duration ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19) : \"\";\n  const tempRunTime = duration ? new Date(duration * 1000).toISOString().slice(11, -5) : \"Ready\";\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #777), color-stop(${currentPercentage}, #FFF))\n  `;\n\n  function findPersistIndex() {\n    const index = persistProgress.findIndex(object => {\n      return object.sourceAudio === sourceAudio;\n    });\n    setPersistProgressIndex(index);\n\n    if (index == -1) {\n      setPersistProgress([...persistProgress, {\n        title,\n        channelTitle,\n        channelImage,\n        episodeImage,\n        sourceAudio,\n        episodeProgress: 0\n      }]);\n    }\n\n    return index;\n  }\n\n  const toNextEpisode = () => {\n    setIsPlaying(false);\n\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.episodes.length - 1);\n      setEpisodeProgress(0);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n      setEpisodeProgress(0);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    setIsPlaying(false);\n    isReady.current = false;\n\n    if (episodeIndex < episodes.episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    findPersistIndex();\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        setIsPlaying(false);\n        toNextEpisode();\n      } else {\n        const tempUpdatedPersist = persistProgress;\n        findPersistIndex();\n        tempUpdatedPersist[persistProgressIndex].episodeProgress = audioRef.current.currentTime;\n        setPersistProgress(tempUpdatedPersist);\n        setRemainingTime(remaining);\n        setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n      }\n    }, [1000]);\n  };\n\n  const onScrub = value => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    const tempUpdatedPersist = persistProgress;\n    tempUpdatedPersist[persistProgressIndex].episodeProgress = value;\n    setRemainingTime(remaining);\n    setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n    setPersistProgress(tempUpdatedPersist);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    setEpisodeIndex(0);\n  }, [episodes.episodes]);\n  useEffect(() => {\n    const trackUpdateRemaining = duration ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19) : \"\";\n    const tempRunTime = duration ? new Date(duration * 1000).toISOString().slice(11, -5) : \"Ready\";\n    setRemainingTime(trackUpdateRemaining);\n    setRunTime(tempRunTime);\n    setEpisodeProgress(0);\n  }, [duration]);\n  useEffect(() => {\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime = persistProgress[checkIndex].episodeProgress;\n    }\n  }, [episodeIndex, audioRef.current]);\n  useEffect(() => {\n    setRunTime(tempRunTime);\n\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  });\n  useEffect(() => {\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  });\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n  }, [playbackRate]);\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio);\n    setPlaybackRate(1);\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime = persistProgress[checkIndex].episodeProgress;\n      setRunTime(tempRunTime);\n    }\n\n    findPersistIndex();\n\n    if (isReady.current) {\n      audioRef.current.pause();\n      setIsPlaying(false);\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes.episodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"podcast-player\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"podcast-player-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"episode-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"episode-poster\",\n          src: episodeImage,\n          alt: `Poster for ${title} episode by ${channelTitle}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"episode-title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"author-text\",\n          children: channelTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          value: episodeProgress,\n          step: \"1\",\n          min: \"0\",\n          max: duration ? duration : `${duration}`,\n          className: \"progress\",\n          onChange: e => onScrub(e.target.value),\n          onMouseUp: onScrubEnd,\n          onKeyUp: onScrubEnd,\n          style: {\n            background: trackStyling\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"runtime-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: remainingTime ? remainingTime : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: runTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AudioControls, {\n          isPlaying: isPlaying,\n          onPrevClick: toPrevEpisode,\n          onNextClick: toNextEpisode,\n          onPlayPauseClick: setIsPlaying,\n          showNextButton: episodeIndex != 0,\n          changeSpeed: setPlaybackRate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"playback speed: \", playbackRate, \"x\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"history-modal\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleShowHistory,\n          children: \"History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: channelImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          show: showHistory,\n          onHide: handleCloseHistory,\n          children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n            closeButton: true,\n            children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n              children: \"Episode History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n            children: persistProgress.map(_ref => {\n              let {\n                author,\n                title,\n                episodeProgress\n              } = _ref;\n              return episodeProgress > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [title, \" \", new Date(episodeProgress * 1000).toISOString().slice(11, -5)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 19\n              }, this) : \"\";\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"secondary\",\n              onClick: handleCloseHistory,\n              children: \"Close History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AudioPlayer, \"d1gp5SkujGY99iilbgVSX9tdH58=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AudioControls","Button","Modal","AudioPlayer","episodes","channelData","console","log","episodeIndex","setEpisodeIndex","episodeProgress","setEpisodeProgress","isPlaying","setIsPlaying","remainingTime","setRemainingTime","runTime","setRunTime","playbackRate","setPlaybackRate","persistProgressIndex","setPersistProgressIndex","Number","persistProgress","setPersistProgress","showHistory","setShowhistory","title","episodeImage","sourceAudio","audioRef","Audio","intervalRef","isReady","handleCloseHistory","handleShowHistory","duration","current","currentPercentage","remaining","Date","toISOString","slice","tempRunTime","trackStyling","findPersistIndex","index","findIndex","object","channelTitle","channelImage","toNextEpisode","length","toPrevEpisode","startTimer","clearInterval","setInterval","ended","tempUpdatedPersist","currentTime","onScrub","value","onScrubEnd","trackUpdateRemaining","checkIndex","undefined","play","pause","e","target","background","map","author"],"sources":["/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/AudioPlayer.jsx"],"sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nconst AudioPlayer = (episodes, channelData) => {\n  console.log(channelData);\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [runTime, setRunTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgressIndex, setPersistProgressIndex] = useState(Number);\n  const [persistProgress, setPersistProgress] = useState([]);\n  const [showHistory, setShowhistory] = useState(false);\n\n  let { title, episodeImage, sourceAudio } = episodes.episodes[episodeIndex];\n\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  const handleCloseHistory = () => setShowhistory(false);\n  const handleShowHistory = () => setShowhistory(true);\n\n  const { duration } = audioRef.current;\n  const currentPercentage = duration\n    ? `${(episodeProgress / duration) * 100}%`\n    : \"0%\";\n\n  const remaining = duration\n    ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19)\n    : \"\";\n\n  const tempRunTime = duration\n    ? new Date(duration * 1000).toISOString().slice(11, -5)\n    : \"Ready\";\n\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #777), color-stop(${currentPercentage}, #FFF))\n  `;\n\n  function findPersistIndex() {\n    const index = persistProgress.findIndex((object) => {\n      return object.sourceAudio === sourceAudio;\n    });\n\n    setPersistProgressIndex(index);\n\n    if (index == -1) {\n      setPersistProgress([\n        ...persistProgress,\n        {\n          title,\n          channelTitle,\n          channelImage,\n          episodeImage,\n          sourceAudio,\n          episodeProgress: 0,\n        },\n      ]);\n    }\n\n    return index;\n  }\n\n  const toNextEpisode = () => {\n    setIsPlaying(false);\n\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.episodes.length - 1);\n      setEpisodeProgress(0);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n      setEpisodeProgress(0);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    setIsPlaying(false);\n\n    isReady.current = false;\n\n    if (episodeIndex < episodes.episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    findPersistIndex();\n\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        setIsPlaying(false);\n        toNextEpisode();\n      } else {\n        const tempUpdatedPersist = persistProgress;\n        findPersistIndex();\n        tempUpdatedPersist[persistProgressIndex].episodeProgress =\n          audioRef.current.currentTime;\n        setPersistProgress(tempUpdatedPersist);\n\n        setRemainingTime(remaining);\n        setEpisodeProgress(\n          persistProgress[persistProgressIndex].episodeProgress\n        );\n      }\n    }, [1000]);\n  };\n\n  const onScrub = (value) => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    const tempUpdatedPersist = persistProgress;\n    tempUpdatedPersist[persistProgressIndex].episodeProgress = value;\n    setRemainingTime(remaining);\n    setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n\n    setPersistProgress(tempUpdatedPersist);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    setEpisodeIndex(0);\n  }, [episodes.episodes]);\n\n  useEffect(() => {\n    const trackUpdateRemaining = duration\n      ? new Date((duration - episodeProgress) * 1000)\n          .toISOString()\n          .slice(11, 19)\n      : \"\";\n\n    const tempRunTime = duration\n      ? new Date(duration * 1000).toISOString().slice(11, -5)\n      : \"Ready\";\n\n    setRemainingTime(trackUpdateRemaining);\n    setRunTime(tempRunTime);\n    setEpisodeProgress(0);\n  }, [duration]);\n\n  useEffect(() => {\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime =\n        persistProgress[checkIndex].episodeProgress;\n    }\n  }, [episodeIndex, audioRef.current]);\n\n  useEffect(() => {\n    setRunTime(tempRunTime);\n    if (isPlaying) {\n      audioRef.current.play();\n\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  });\n\n  useEffect(() => {\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  });\n\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio);\n    setPlaybackRate(1);\n\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime =\n        persistProgress[checkIndex].episodeProgress;\n      setRunTime(tempRunTime);\n    }\n\n    findPersistIndex();\n\n    if (isReady.current) {\n      audioRef.current.pause();\n      setIsPlaying(false);\n\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes.episodes]);\n\n  return (\n    <div className=\"podcast-player\">\n      <div className=\"podcast-player-inner\">\n        <div className=\"episode-info\">\n          <img\n            className=\"episode-poster\"\n            src={episodeImage}\n            alt={`Poster for ${title} episode by ${channelTitle}`}\n          />\n          <h3 className=\"episode-title\">{title}</h3>\n          <h3 className=\"author-text\">{channelTitle}</h3>\n\n          <input\n            type=\"range\"\n            value={episodeProgress}\n            step=\"1\"\n            min=\"0\"\n            max={duration ? duration : `${duration}`}\n            className=\"progress\"\n            onChange={(e) => onScrub(e.target.value)}\n            onMouseUp={onScrubEnd}\n            onKeyUp={onScrubEnd}\n            style={{ background: trackStyling }}\n          />\n          <div className=\"runtime-display\">\n            <p>{remainingTime ? remainingTime : \"\"}</p>\n            <p>{runTime}</p>\n          </div>\n          <AudioControls\n            isPlaying={isPlaying}\n            onPrevClick={toPrevEpisode}\n            onNextClick={toNextEpisode}\n            onPlayPauseClick={setIsPlaying}\n            showNextButton={episodeIndex != 0}\n            changeSpeed={setPlaybackRate}\n          />\n          <p>playback speed: {playbackRate}x</p>\n        </div>\n        <div className=\"history-modal\">\n          <Button variant=\"primary\" onClick={handleShowHistory}>\n            History\n          </Button>\n          <img src={channelImage} />\n\n          <Modal show={showHistory} onHide={handleCloseHistory}>\n            <Modal.Header closeButton>\n              <Modal.Title>Episode History</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              {persistProgress.map(({ author, title, episodeProgress }) =>\n                episodeProgress > 0 ? (\n                  <div>\n                    <p>\n                      {title}{\" \"}\n                      {new Date(episodeProgress * 1000)\n                        .toISOString()\n                        .slice(11, -5)}\n                    </p>\n                  </div>\n                ) : (\n                  \"\"\n                )\n              )}\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={handleCloseHistory}>\n                Close History\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}