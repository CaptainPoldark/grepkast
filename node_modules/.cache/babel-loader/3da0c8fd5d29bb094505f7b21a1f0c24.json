{"ast":null,"code":"var _jsxFileName = \"/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/AudioPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { Offcanvas } from \"react-bootstrap/Offcanvas\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioPlayer = _ref => {\n  _s();\n\n  let {\n    episodes,\n    metaData\n  } = _ref;\n  console.log(metaData);\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [runTime, setRunTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgressIndex, setPersistProgressIndex] = useState(Number);\n  const [persistProgress, setPersistProgress] = useState([]);\n  const [showHistory, setShowhistory] = useState(false);\n  const [showAboutEpisode, setShowAboutEpisode] = useState(false);\n  let {\n    title,\n    episodeImage,\n    sourceAudio,\n    description,\n    pubDate\n  } = episodes[episodeIndex];\n  const {\n    channelImage,\n    channelTitle,\n    channelLink\n  } = metaData;\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n\n  const handleCloseHistory = () => setShowhistory(false);\n\n  const handleShowHistory = () => setShowhistory(true);\n\n  const handleCloseAboutEpisode = () => setShowAboutEpisode(false);\n\n  const handleShowAboutEpisode = () => setShowAboutEpisode(true);\n\n  const {\n    duration\n  } = audioRef.current;\n\n  const converToPercentage = () => {\n    let temp = episodeProgress / duration * 100;\n    return temp;\n  };\n\n  const currentPercentage = duration ? `${converToPercentage()}%` : \"0%\";\n  const cleanCurrentPercentage = duration ? converToPercentage().toString() : 0;\n  const remaining = duration ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19) : \"\";\n  const tempRunTime = duration ? new Date(duration * 1000).toISOString().slice(11, -5) : \"Ready\";\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #777), color-stop(${currentPercentage}, #FFF))\n  `;\n\n  function findPersistIndex() {\n    const index = persistProgress.findIndex(object => {\n      return object.sourceAudio === sourceAudio;\n    });\n    setPersistProgressIndex(index);\n\n    if (index == -1) {\n      setPersistProgress([...persistProgress, {\n        title,\n        channelTitle,\n        channelImage,\n        episodeImage,\n        sourceAudio,\n        episodeProgress: 0,\n        cleanCurrentPercentage\n      }]);\n    }\n\n    return index;\n  }\n\n  const toNextEpisode = () => {\n    setIsPlaying(false);\n\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.length - 1);\n      setEpisodeProgress(0);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n      setEpisodeProgress(0);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    setIsPlaying(false);\n    isReady.current = false;\n\n    if (episodeIndex < episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    findPersistIndex();\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        setIsPlaying(false);\n      } else {\n        const tempUpdatedPersist = persistProgress;\n        findPersistIndex();\n        tempUpdatedPersist[persistProgressIndex].episodeProgress = audioRef.current.currentTime;\n        tempUpdatedPersist[persistProgressIndex].currentPercentage = cleanCurrentPercentage;\n        setPersistProgress(tempUpdatedPersist);\n        setRemainingTime(remaining);\n        setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n      }\n    }, [1000]);\n  };\n\n  const onScrub = value => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    const tempUpdatedPersist = persistProgress;\n    tempUpdatedPersist[persistProgressIndex].episodeProgress = value;\n    setRemainingTime(remaining);\n    setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n    setPersistProgress(tempUpdatedPersist);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    setEpisodeIndex(0);\n  }, [episodes]);\n  useEffect(() => {\n    const trackUpdateRemaining = duration ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19) : \"\";\n    const tempRunTime = duration ? new Date(duration * 1000).toISOString().slice(11, -5) : \"Ready\";\n    setRemainingTime(trackUpdateRemaining);\n    setRunTime(tempRunTime);\n    setEpisodeProgress(0);\n  }, [duration]);\n  useEffect(() => {\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime = persistProgress[checkIndex].episodeProgress;\n    }\n  }, [episodeIndex, audioRef.current]);\n  useEffect(() => {\n    setRunTime(tempRunTime);\n\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  });\n  useEffect(() => {\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  });\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n  }, [playbackRate]);\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio);\n    setPlaybackRate(1);\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime = persistProgress[checkIndex].episodeProgress;\n      setRunTime(tempRunTime);\n    }\n\n    findPersistIndex();\n\n    if (isReady.current) {\n      audioRef.current.pause();\n      setIsPlaying(false);\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"podcast-player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"podcast-player-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"episode-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"episode-poster\",\n          src: episodeImage,\n          alt: `Poster for ${title} episode by ${channelTitle}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"episode-title\",\n          onClick: handleShowAboutEpisode,\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"author-text\",\n          children: channelTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          value: episodeProgress,\n          step: \"1\",\n          min: \"0\",\n          max: duration ? duration : `${duration}`,\n          className: \"progress\",\n          onChange: e => onScrub(e.target.value),\n          onMouseUp: onScrubEnd,\n          onKeyUp: onScrubEnd,\n          style: {\n            background: trackStyling\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"runtime-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: remainingTime ? remainingTime : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: runTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AudioControls, {\n          isPlaying: isPlaying,\n          onPrevClick: toPrevEpisode,\n          onNextClick: toNextEpisode,\n          onPlayPauseClick: setIsPlaying,\n          showNextButton: episodeIndex != 0,\n          changeSpeed: setPlaybackRate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"podcast-history-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"podcast-footer\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: handleShowHistory,\n            children: \"History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"playback speed: \", playbackRate, \"x\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: channelLink,\n            target: \"_blank\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"channel-image\",\n              src: channelImage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          show: showHistory,\n          onHide: handleCloseHistory,\n          children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n            closeButton: true,\n            children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n              children: \"Episode History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n            children: persistProgress.map(_ref2 => {\n              let {\n                channelTitle,\n                title,\n                episodeProgress,\n                currentPercentage\n              } = _ref2;\n              return episodeProgress > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [channelTitle, \" - \", title, \" Played:\", \" \", new Date(episodeProgress * 1000).toISOString().slice(11, -5), \" \", currentPercentage < 10 ? currentPercentage.slice(0, 3) : currentPercentage.slice(0, 4), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 285,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 284,\n                columnNumber: 21\n              }, this) : \"\";\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"secondary\",\n              onClick: handleCloseHistory,\n              children: \"Close History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Offcanvas, {\n      show: showAboutEpisode,\n      onHide: handleCloseAboutEpisode,\n      children: [/*#__PURE__*/_jsxDEV(Offcanvas.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Offcanvas.Title, {\n          children: \"About This Episode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Offcanvas.Body, {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Published: \", pubDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: channelLink,\n          target: \"_blank\",\n          children: channehlLink\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AudioPlayer, \"FYG0703FSm3LwcRMW36wpq1RIfE=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AudioControls","Button","Modal","Offcanvas","AudioPlayer","episodes","metaData","console","log","episodeIndex","setEpisodeIndex","episodeProgress","setEpisodeProgress","isPlaying","setIsPlaying","remainingTime","setRemainingTime","runTime","setRunTime","playbackRate","setPlaybackRate","persistProgressIndex","setPersistProgressIndex","Number","persistProgress","setPersistProgress","showHistory","setShowhistory","showAboutEpisode","setShowAboutEpisode","title","episodeImage","sourceAudio","description","pubDate","channelImage","channelTitle","channelLink","audioRef","Audio","intervalRef","isReady","handleCloseHistory","handleShowHistory","handleCloseAboutEpisode","handleShowAboutEpisode","duration","current","converToPercentage","temp","currentPercentage","cleanCurrentPercentage","toString","remaining","Date","toISOString","slice","tempRunTime","trackStyling","findPersistIndex","index","findIndex","object","toNextEpisode","length","toPrevEpisode","startTimer","clearInterval","setInterval","ended","tempUpdatedPersist","currentTime","onScrub","value","onScrubEnd","trackUpdateRemaining","checkIndex","undefined","play","pause","e","target","background","map","channehlLink"],"sources":["/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/AudioPlayer.jsx"],"sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { Offcanvas } from \"react-bootstrap/Offcanvas\";\n\nconst AudioPlayer = ({ episodes, metaData }) => {\n  console.log(metaData);\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [runTime, setRunTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgressIndex, setPersistProgressIndex] = useState(Number);\n  const [persistProgress, setPersistProgress] = useState([]);\n  const [showHistory, setShowhistory] = useState(false);\n  const [showAboutEpisode, setShowAboutEpisode] = useState(false);\n\n  let { title, episodeImage, sourceAudio, description, pubDate } =\n    episodes[episodeIndex];\n  const { channelImage, channelTitle, channelLink } = metaData;\n\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  const handleCloseHistory = () => setShowhistory(false);\n  const handleShowHistory = () => setShowhistory(true);\n  const handleCloseAboutEpisode = () => setShowAboutEpisode(false);\n  const handleShowAboutEpisode = () => setShowAboutEpisode(true);\n\n  const { duration } = audioRef.current;\n\n  const converToPercentage = () => {\n    let temp = (episodeProgress / duration) * 100;\n\n    return temp;\n  };\n  const currentPercentage = duration ? `${converToPercentage()}%` : \"0%\";\n\n  const cleanCurrentPercentage = duration ? converToPercentage().toString() : 0;\n\n  const remaining = duration\n    ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19)\n    : \"\";\n\n  const tempRunTime = duration\n    ? new Date(duration * 1000).toISOString().slice(11, -5)\n    : \"Ready\";\n\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #777), color-stop(${currentPercentage}, #FFF))\n  `;\n\n  function findPersistIndex() {\n    const index = persistProgress.findIndex((object) => {\n      return object.sourceAudio === sourceAudio;\n    });\n\n    setPersistProgressIndex(index);\n\n    if (index == -1) {\n      setPersistProgress([\n        ...persistProgress,\n        {\n          title,\n          channelTitle,\n          channelImage,\n          episodeImage,\n          sourceAudio,\n          episodeProgress: 0,\n          cleanCurrentPercentage,\n        },\n      ]);\n    }\n\n    return index;\n  }\n\n  const toNextEpisode = () => {\n    setIsPlaying(false);\n\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.length - 1);\n      setEpisodeProgress(0);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n      setEpisodeProgress(0);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    setIsPlaying(false);\n\n    isReady.current = false;\n\n    if (episodeIndex < episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    findPersistIndex();\n\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        setIsPlaying(false);\n      } else {\n        const tempUpdatedPersist = persistProgress;\n        findPersistIndex();\n        tempUpdatedPersist[persistProgressIndex].episodeProgress =\n          audioRef.current.currentTime;\n        tempUpdatedPersist[persistProgressIndex].currentPercentage =\n          cleanCurrentPercentage;\n        setPersistProgress(tempUpdatedPersist);\n\n        setRemainingTime(remaining);\n        setEpisodeProgress(\n          persistProgress[persistProgressIndex].episodeProgress\n        );\n      }\n    }, [1000]);\n  };\n\n  const onScrub = (value) => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    const tempUpdatedPersist = persistProgress;\n    tempUpdatedPersist[persistProgressIndex].episodeProgress = value;\n    setRemainingTime(remaining);\n    setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n\n    setPersistProgress(tempUpdatedPersist);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    setEpisodeIndex(0);\n  }, [episodes]);\n\n  useEffect(() => {\n    const trackUpdateRemaining = duration\n      ? new Date((duration - episodeProgress) * 1000)\n          .toISOString()\n          .slice(11, 19)\n      : \"\";\n\n    const tempRunTime = duration\n      ? new Date(duration * 1000).toISOString().slice(11, -5)\n      : \"Ready\";\n\n    setRemainingTime(trackUpdateRemaining);\n    setRunTime(tempRunTime);\n    setEpisodeProgress(0);\n  }, [duration]);\n\n  useEffect(() => {\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime =\n        persistProgress[checkIndex].episodeProgress;\n    }\n  }, [episodeIndex, audioRef.current]);\n\n  useEffect(() => {\n    setRunTime(tempRunTime);\n    if (isPlaying) {\n      audioRef.current.play();\n\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  });\n\n  useEffect(() => {\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  });\n\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio);\n    setPlaybackRate(1);\n\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime =\n        persistProgress[checkIndex].episodeProgress;\n      setRunTime(tempRunTime);\n    }\n\n    findPersistIndex();\n\n    if (isReady.current) {\n      audioRef.current.pause();\n      setIsPlaying(false);\n\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes]);\n\n  return (\n    <div className=\"podcast-player\">\n      <div className=\"podcast-player-inner\">\n        <div className=\"episode-info\">\n          <img\n            className=\"episode-poster\"\n            src={episodeImage}\n            alt={`Poster for ${title} episode by ${channelTitle}`}\n          />\n          <h3 className=\"episode-title\" onClick={handleShowAboutEpisode}>\n            {title}\n          </h3>\n          <h3 className=\"author-text\">{channelTitle}</h3>\n\n          <input\n            type=\"range\"\n            value={episodeProgress}\n            step=\"1\"\n            min=\"0\"\n            max={duration ? duration : `${duration}`}\n            className=\"progress\"\n            onChange={(e) => onScrub(e.target.value)}\n            onMouseUp={onScrubEnd}\n            onKeyUp={onScrubEnd}\n            style={{ background: trackStyling }}\n          />\n          <div className=\"runtime-display\">\n            <p>{remainingTime ? remainingTime : \"\"}</p>\n            <p>{runTime}</p>\n          </div>\n          <AudioControls\n            isPlaying={isPlaying}\n            onPrevClick={toPrevEpisode}\n            onNextClick={toNextEpisode}\n            onPlayPauseClick={setIsPlaying}\n            showNextButton={episodeIndex != 0}\n            changeSpeed={setPlaybackRate}\n          />\n        </div>\n        <div className=\"podcast-history-modal\">\n          <div className=\"podcast-footer\">\n            <Button variant=\"primary\" onClick={handleShowHistory}>\n              History\n            </Button>\n            <p>playback speed: {playbackRate}x</p>\n            <a href={channelLink} target=\"_blank\">\n              {\" \"}\n              <img className=\"channel-image\" src={channelImage} />\n            </a>\n          </div>\n\n          <Modal show={showHistory} onHide={handleCloseHistory}>\n            <Modal.Header closeButton>\n              <Modal.Title>Episode History</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              {persistProgress.map(\n                ({ channelTitle, title, episodeProgress, currentPercentage }) =>\n                  episodeProgress > 0 ? (\n                    <div>\n                      <p>\n                        {channelTitle} - {title} Played:{\" \"}\n                        {new Date(episodeProgress * 1000)\n                          .toISOString()\n                          .slice(11, -5)}{\" \"}\n                        {currentPercentage < 10\n                          ? currentPercentage.slice(0, 3)\n                          : currentPercentage.slice(0, 4)}\n                        %\n                      </p>\n                    </div>\n                  ) : (\n                    \"\"\n                  )\n              )}\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={handleCloseHistory}>\n                Close History\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </div>\n      </div>\n      <Offcanvas show={showAboutEpisode} onHide={handleCloseAboutEpisode}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>About This Episode</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <h4>{title}</h4>\n          <p>Published: {pubDate}</p>\n          <br />\n          <br />\n          <p>{description}</p>\n          <br />\n          <br />\n          <a href={channelLink} target=\"_blank\">\n            {channehlLink}\n          </a>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}