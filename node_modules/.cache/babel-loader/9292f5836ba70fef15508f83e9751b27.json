{"ast":null,"code":"var _jsxFileName = \"/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/AudioPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AudioPlayer(episodes) {\n  _s();\n\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgress, setPersistProgress] = useState([]);\n  let {\n    title,\n    author,\n    episodeImage,\n    sourceAudio\n  } = episodes.episodes[episodeIndex];\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  const {\n    duration\n  } = audioRef.current;\n  const currentPercentage = duration ? `${episodeProgress / duration * 100}%` : \"0%\";\n  const remaining = duration ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19) : \"\";\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #fff), color-stop(${currentPercentage}, #777))\n  `;\n\n  const toNextEpisode = () => {\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.episodes.length - 1);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    if (episodeIndex < episodes.episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        toNextEpisode();\n      } else {\n        setEpisodeProgress(audioRef.current.currentTime);\n      }\n    }, [1000]);\n  };\n\n  const onScrub = value => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    setEpisodeProgress(audioRef.current.currentTime);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying]);\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n    setRemainingTime(remaining);\n    const index = persistProgress.findIndex(object => {\n      return object.sourceAudio === sourceAudio;\n    });\n    console.log(\"Found: \" + index);\n\n    if (index == -1) {\n      setPersistProgress([...persistProgress, {\n        title,\n        author,\n        episodeImage,\n        sourceAudio,\n        episodeProgress\n      }]);\n    } else {\n      setEpisodeProgress(persistProgress[index].episodeProgress);\n      console.log(\"Current Progress: \" + episodeProgress);\n    }\n\n    console.log(persistProgress);\n  });\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio);\n    setEpisodeProgress(audioRef.current.currentTime);\n\n    if (audioRef.waiting) {\n      audioRef.current.play();\n      setIsPlaying(false);\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes.episodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"podcast-player\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"episode-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"episode-poster\",\n        src: episodeImage,\n        alt: `Poster for ${title} episode by ${author}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"episode-title\",\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"author-text\",\n        children: author\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Time Remaining: \", isReady ? remainingTime : \"Media Loading\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        value: episodeProgress,\n        step: \"1\",\n        min: \"0\",\n        max: duration ? duration : `${duration}`,\n        className: \"progress\",\n        onChange: e => onScrub(e.target.value),\n        onMouseUp: onScrubEnd,\n        onKeyUp: onScrubEnd,\n        style: {\n          background: trackStyling\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AudioControls, {\n        isPlaying: isPlaying,\n        onPrevClick: toPrevEpisode,\n        onNextClick: toNextEpisode,\n        onPlayPauseClick: setIsPlaying,\n        showNextButton: episodeIndex != 0,\n        changeSpeed: setPlaybackRate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AudioPlayer, \"5FmHmBih7OA+AtNf1/Ygy/FHz5o=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AudioControls","AudioPlayer","episodes","episodeIndex","setEpisodeIndex","episodeProgress","setEpisodeProgress","isPlaying","setIsPlaying","remainingTime","setRemainingTime","playbackRate","setPlaybackRate","persistProgress","setPersistProgress","title","author","episodeImage","sourceAudio","audioRef","Audio","intervalRef","isReady","duration","current","currentPercentage","remaining","Date","toISOString","slice","trackStyling","toNextEpisode","length","toPrevEpisode","startTimer","clearInterval","setInterval","ended","currentTime","onScrub","value","onScrubEnd","play","pause","index","findIndex","object","console","log","waiting","e","target","background"],"sources":["/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/AudioPlayer.jsx"],"sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\n\nfunction AudioPlayer(episodes) {\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgress, setPersistProgress] = useState([]);\n\n  let { title, author, episodeImage, sourceAudio } =\n    episodes.episodes[episodeIndex];\n\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n\n  const { duration } = audioRef.current;\n  const currentPercentage = duration\n    ? `${(episodeProgress / duration) * 100}%`\n    : \"0%\";\n  const remaining = duration\n    ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19)\n    : \"\";\n\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #fff), color-stop(${currentPercentage}, #777))\n  `;\n\n  const toNextEpisode = () => {\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.episodes.length - 1);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    if (episodeIndex < episodes.episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        toNextEpisode();\n      } else {\n        setEpisodeProgress(audioRef.current.currentTime);\n      }\n    }, [1000]);\n  };\n\n  const onScrub = (value) => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    setEpisodeProgress(audioRef.current.currentTime);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      audioRef.current.play();\n\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  }, [isPlaying]);\n\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n    setRemainingTime(remaining);\n    const index = persistProgress.findIndex((object) => {\n      return object.sourceAudio === sourceAudio;\n    });\n    console.log(\"Found: \" + index);\n\n    if (index == -1) {\n      setPersistProgress([\n        ...persistProgress,\n        { title, author, episodeImage, sourceAudio, episodeProgress },\n      ]);\n    } else {\n      setEpisodeProgress(persistProgress[index].episodeProgress);\n      console.log(\"Current Progress: \" + episodeProgress);\n    }\n    console.log(persistProgress);\n  });\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio);\n    setEpisodeProgress(audioRef.current.currentTime);\n\n    if (audioRef.waiting) {\n      audioRef.current.play();\n      setIsPlaying(false);\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes.episodes]);\n\n  return (\n    <div className=\"podcast-player\">\n      <div className=\"episode-info\">\n        <img\n          className=\"episode-poster\"\n          src={episodeImage}\n          alt={`Poster for ${title} episode by ${author}`}\n        />\n        <h2 className=\"episode-title\">{title}</h2>\n        <h2 className=\"author-text\">{author}</h2>\n        <div>\n          <h3>Time Remaining: {isReady ? remainingTime : \"Media Loading\"}</h3>\n        </div>\n        <input\n          type=\"range\"\n          value={episodeProgress}\n          step=\"1\"\n          min=\"0\"\n          max={duration ? duration : `${duration}`}\n          className=\"progress\"\n          onChange={(e) => onScrub(e.target.value)}\n          onMouseUp={onScrubEnd}\n          onKeyUp={onScrubEnd}\n          style={{ background: trackStyling }}\n        />\n        <AudioControls\n          isPlaying={isPlaying}\n          onPrevClick={toPrevEpisode}\n          onNextClick={toNextEpisode}\n          onPlayPauseClick={setIsPlaying}\n          showNextButton={episodeIndex != 0}\n          changeSpeed={setPlaybackRate}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default AudioPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}