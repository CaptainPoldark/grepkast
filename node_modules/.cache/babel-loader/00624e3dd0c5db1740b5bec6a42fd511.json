{"ast":null,"code":"var _jsxFileName = \"/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/AudioPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AudioPlayer = _ref => {\n  _s();\n\n  let {\n    episodes,\n    metaData\n  } = _ref;\n  console.log(metaData);\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [runTime, setRunTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgressIndex, setPersistProgressIndex] = useState(Number);\n  const [persistProgress, setPersistProgress] = useState([]);\n  const [showHistory, setShowhistory] = useState(false);\n  let {\n    title,\n    episodeImage,\n    sourceAudio\n  } = episodes[episodeIndex];\n  const {\n    channelImage,\n    channelTitle,\n    channelLink\n  } = metaData;\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n\n  const handleCloseHistory = () => setShowhistory(false);\n\n  const handleShowHistory = () => setShowhistory(true);\n\n  const {\n    duration\n  } = audioRef.current;\n\n  const converToPercentage = () => {\n    let temp = episodeProgress / duration * 100;\n    return temp;\n  };\n\n  const currentPercentage = duration ? `${converToPercentage()}%` : \"0%\";\n  const cleanCurrentPercentage = duration ? converToPercentage().toString() : 0;\n  const remaining = duration ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19) : \"\";\n  const tempRunTime = duration ? new Date(duration * 1000).toISOString().slice(11, -5) : \"Ready\";\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #777), color-stop(${currentPercentage}, #FFF))\n  `;\n\n  function findPersistIndex() {\n    const index = persistProgress.findIndex(object => {\n      return object.sourceAudio === sourceAudio;\n    });\n    setPersistProgressIndex(index);\n\n    if (index == -1) {\n      setPersistProgress([...persistProgress, {\n        title,\n        channelTitle,\n        channelImage,\n        episodeImage,\n        sourceAudio,\n        episodeProgress: 0,\n        cleanCurrentPercentage\n      }]);\n    }\n\n    return index;\n  }\n\n  const toNextEpisode = () => {\n    setIsPlaying(false);\n\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.length - 1);\n      setEpisodeProgress(0);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n      setEpisodeProgress(0);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    setIsPlaying(false);\n    isReady.current = false;\n\n    if (episodeIndex < episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    findPersistIndex();\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        setIsPlaying(false);\n      } else {\n        const tempUpdatedPersist = persistProgress;\n        findPersistIndex();\n        tempUpdatedPersist[persistProgressIndex].episodeProgress = audioRef.current.currentTime;\n        tempUpdatedPersist[persistProgressIndex].currentPercentage = cleanCurrentPercentage;\n        setPersistProgress(tempUpdatedPersist);\n        setRemainingTime(remaining);\n        setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n      }\n    }, [1000]);\n  };\n\n  const onScrub = value => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    const tempUpdatedPersist = persistProgress;\n    tempUpdatedPersist[persistProgressIndex].episodeProgress = value;\n    setRemainingTime(remaining);\n    setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n    setPersistProgress(tempUpdatedPersist);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    setEpisodeIndex(0);\n  }, [episodes]);\n  useEffect(() => {\n    const trackUpdateRemaining = duration ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19) : \"\";\n    const tempRunTime = duration ? new Date(duration * 1000).toISOString().slice(11, -5) : \"Ready\";\n    setRemainingTime(trackUpdateRemaining);\n    setRunTime(tempRunTime);\n    setEpisodeProgress(0);\n  }, [duration]);\n  useEffect(() => {\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime = persistProgress[checkIndex].episodeProgress;\n    }\n  }, [episodeIndex, audioRef.current]);\n  useEffect(() => {\n    setRunTime(tempRunTime);\n\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  });\n  useEffect(() => {\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  });\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n  }, [playbackRate]);\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio);\n    setPlaybackRate(1);\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime = persistProgress[checkIndex].episodeProgress;\n      setRunTime(tempRunTime);\n    }\n\n    findPersistIndex();\n\n    if (isReady.current) {\n      audioRef.current.pause();\n      setIsPlaying(false);\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"podcast-player\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"podcast-player-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"episode-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"episode-poster\",\n          src: episodeImage,\n          alt: `Poster for ${title} episode by ${channelTitle}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"episode-title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"author-text\",\n          children: channelTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          value: episodeProgress,\n          step: \"1\",\n          min: \"0\",\n          max: duration ? duration : `${duration}`,\n          className: \"progress\",\n          onChange: e => onScrub(e.target.value),\n          onMouseUp: onScrubEnd,\n          onKeyUp: onScrubEnd,\n          style: {\n            background: trackStyling\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"runtime-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: remainingTime ? remainingTime : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: runTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AudioControls, {\n          isPlaying: isPlaying,\n          onPrevClick: toPrevEpisode,\n          onNextClick: toNextEpisode,\n          onPlayPauseClick: setIsPlaying,\n          showNextButton: episodeIndex != 0,\n          changeSpeed: setPlaybackRate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"podcast-history-modal\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"podcast-footer\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: handleShowHistory,\n            children: \"History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"playback speed: \", playbackRate, \"x\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"channel-image\",\n            src: channelImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal, {\n          show: showHistory,\n          onHide: handleCloseHistory,\n          children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n            closeButton: true,\n            children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n              children: \"Episode History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n            children: persistProgress.map(_ref2 => {\n              let {\n                channelTitle,\n                title,\n                episodeProgress,\n                currentPercentage\n              } = _ref2;\n              return episodeProgress > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [channelTitle, \" - \", title, \" Played:\", \" \", new Date(episodeProgress * 1000).toISOString().slice(11, -5), \" \", currentPercentage < 10 ? currentPercentage.slice(0, 3) : currentPercentage.slice(0, 4), \"%\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 21\n              }, this) : \"\";\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"secondary\",\n              onClick: handleCloseHistory,\n              children: \"Close History\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AudioPlayer, \"d1gp5SkujGY99iilbgVSX9tdH58=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AudioControls","Button","Modal","AudioPlayer","episodes","metaData","console","log","episodeIndex","setEpisodeIndex","episodeProgress","setEpisodeProgress","isPlaying","setIsPlaying","remainingTime","setRemainingTime","runTime","setRunTime","playbackRate","setPlaybackRate","persistProgressIndex","setPersistProgressIndex","Number","persistProgress","setPersistProgress","showHistory","setShowhistory","title","episodeImage","sourceAudio","channelImage","channelTitle","channelLink","audioRef","Audio","intervalRef","isReady","handleCloseHistory","handleShowHistory","duration","current","converToPercentage","temp","currentPercentage","cleanCurrentPercentage","toString","remaining","Date","toISOString","slice","tempRunTime","trackStyling","findPersistIndex","index","findIndex","object","toNextEpisode","length","toPrevEpisode","startTimer","clearInterval","setInterval","ended","tempUpdatedPersist","currentTime","onScrub","value","onScrubEnd","trackUpdateRemaining","checkIndex","undefined","play","pause","e","target","background","map"],"sources":["/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/AudioPlayer.jsx"],"sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\nconst AudioPlayer = ({ episodes, metaData }) => {\n  console.log(metaData);\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [runTime, setRunTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgressIndex, setPersistProgressIndex] = useState(Number);\n  const [persistProgress, setPersistProgress] = useState([]);\n  const [showHistory, setShowhistory] = useState(false);\n\n  let { title, episodeImage, sourceAudio } = episodes[episodeIndex];\n  const { channelImage, channelTitle, channelLink } = metaData;\n\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  const handleCloseHistory = () => setShowhistory(false);\n  const handleShowHistory = () => setShowhistory(true);\n\n  const { duration } = audioRef.current;\n\n  const converToPercentage = () => {\n    let temp = (episodeProgress / duration) * 100;\n\n    return temp;\n  };\n  const currentPercentage = duration ? `${converToPercentage()}%` : \"0%\";\n\n  const cleanCurrentPercentage = duration ? converToPercentage().toString() : 0;\n\n  const remaining = duration\n    ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19)\n    : \"\";\n\n  const tempRunTime = duration\n    ? new Date(duration * 1000).toISOString().slice(11, -5)\n    : \"Ready\";\n\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #777), color-stop(${currentPercentage}, #FFF))\n  `;\n\n  function findPersistIndex() {\n    const index = persistProgress.findIndex((object) => {\n      return object.sourceAudio === sourceAudio;\n    });\n\n    setPersistProgressIndex(index);\n\n    if (index == -1) {\n      setPersistProgress([\n        ...persistProgress,\n        {\n          title,\n          channelTitle,\n          channelImage,\n          episodeImage,\n          sourceAudio,\n          episodeProgress: 0,\n          cleanCurrentPercentage,\n        },\n      ]);\n    }\n\n    return index;\n  }\n\n  const toNextEpisode = () => {\n    setIsPlaying(false);\n\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.length - 1);\n      setEpisodeProgress(0);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n      setEpisodeProgress(0);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    setIsPlaying(false);\n\n    isReady.current = false;\n\n    if (episodeIndex < episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    findPersistIndex();\n\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        setIsPlaying(false);\n      } else {\n        const tempUpdatedPersist = persistProgress;\n        findPersistIndex();\n        tempUpdatedPersist[persistProgressIndex].episodeProgress =\n          audioRef.current.currentTime;\n        tempUpdatedPersist[persistProgressIndex].currentPercentage =\n          cleanCurrentPercentage;\n        setPersistProgress(tempUpdatedPersist);\n\n        setRemainingTime(remaining);\n        setEpisodeProgress(\n          persistProgress[persistProgressIndex].episodeProgress\n        );\n      }\n    }, [1000]);\n  };\n\n  const onScrub = (value) => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    const tempUpdatedPersist = persistProgress;\n    tempUpdatedPersist[persistProgressIndex].episodeProgress = value;\n    setRemainingTime(remaining);\n    setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n\n    setPersistProgress(tempUpdatedPersist);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    setEpisodeIndex(0);\n  }, [episodes]);\n\n  useEffect(() => {\n    const trackUpdateRemaining = duration\n      ? new Date((duration - episodeProgress) * 1000)\n          .toISOString()\n          .slice(11, 19)\n      : \"\";\n\n    const tempRunTime = duration\n      ? new Date(duration * 1000).toISOString().slice(11, -5)\n      : \"Ready\";\n\n    setRemainingTime(trackUpdateRemaining);\n    setRunTime(tempRunTime);\n    setEpisodeProgress(0);\n  }, [duration]);\n\n  useEffect(() => {\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime =\n        persistProgress[checkIndex].episodeProgress;\n    }\n  }, [episodeIndex, audioRef.current]);\n\n  useEffect(() => {\n    setRunTime(tempRunTime);\n    if (isPlaying) {\n      audioRef.current.play();\n\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  });\n\n  useEffect(() => {\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  });\n\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio);\n    setPlaybackRate(1);\n\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime =\n        persistProgress[checkIndex].episodeProgress;\n      setRunTime(tempRunTime);\n    }\n\n    findPersistIndex();\n\n    if (isReady.current) {\n      audioRef.current.pause();\n      setIsPlaying(false);\n\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes]);\n\n  return (\n    <div className=\"podcast-player\">\n      <div className=\"podcast-player-inner\">\n        <div className=\"episode-info\">\n          <img\n            className=\"episode-poster\"\n            src={episodeImage}\n            alt={`Poster for ${title} episode by ${channelTitle}`}\n          />\n          <h3 className=\"episode-title\">{title}</h3>\n          <h3 className=\"author-text\">{channelTitle}</h3>\n\n          <input\n            type=\"range\"\n            value={episodeProgress}\n            step=\"1\"\n            min=\"0\"\n            max={duration ? duration : `${duration}`}\n            className=\"progress\"\n            onChange={(e) => onScrub(e.target.value)}\n            onMouseUp={onScrubEnd}\n            onKeyUp={onScrubEnd}\n            style={{ background: trackStyling }}\n          />\n          <div className=\"runtime-display\">\n            <p>{remainingTime ? remainingTime : \"\"}</p>\n            <p>{runTime}</p>\n          </div>\n          <AudioControls\n            isPlaying={isPlaying}\n            onPrevClick={toPrevEpisode}\n            onNextClick={toNextEpisode}\n            onPlayPauseClick={setIsPlaying}\n            showNextButton={episodeIndex != 0}\n            changeSpeed={setPlaybackRate}\n          />\n        </div>\n        <div className=\"podcast-history-modal\">\n          <div className=\"podcast-footer\">\n            <Button variant=\"primary\" onClick={handleShowHistory}>\n              History\n            </Button>\n            <p>playback speed: {playbackRate}x</p>\n            <img className=\"channel-image\" src={channelImage} />\n          </div>\n\n          <Modal show={showHistory} onHide={handleCloseHistory}>\n            <Modal.Header closeButton>\n              <Modal.Title>Episode History</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n              {persistProgress.map(\n                ({ channelTitle, title, episodeProgress, currentPercentage }) =>\n                  episodeProgress > 0 ? (\n                    <div>\n                      <p>\n                        {channelTitle} - {title} Played:{\" \"}\n                        {new Date(episodeProgress * 1000)\n                          .toISOString()\n                          .slice(11, -5)}{\" \"}\n                        {currentPercentage < 10\n                          ? currentPercentage.slice(0, 3)\n                          : currentPercentage.slice(0, 4)}\n                        %\n                      </p>\n                    </div>\n                  ) : (\n                    \"\"\n                  )\n              )}\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={handleCloseHistory}>\n                Close History\n              </Button>\n            </Modal.Footer>\n          </Modal>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AudioPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}