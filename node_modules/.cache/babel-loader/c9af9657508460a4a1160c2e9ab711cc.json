{"ast":null,"code":"var _jsxFileName = \"/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/AudioPlayer.jsx\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AudioPlayer(episodes) {\n  _s();\n\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [runTime, setRunTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgressIndex, setPersistProgressIndex] = useState(Number);\n  const [persistProgress, setPersistProgress] = useState([]);\n  let {\n    title,\n    author,\n    episodeImage,\n    sourceAudio\n  } = episodes.episodes[episodeIndex];\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n  const {\n    duration\n  } = audioRef.current;\n  const currentPercentage = duration ? `${episodeProgress / duration * 100}%` : \"0%\";\n  const tempRunTime = duration ? new Date(duration * 1000).toISOString().slice(11, -5) : \"Ready\";\n  console.log(tempRunTime);\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #777), color-stop(${currentPercentage}, #FFF))\n  `;\n\n  function findPersistIndex() {\n    const index = persistProgress.findIndex(object => {\n      return object.sourceAudio === sourceAudio;\n    });\n    setPersistProgressIndex(index);\n\n    if (index == -1) {\n      setPersistProgress([...persistProgress, {\n        title,\n        author,\n        episodeImage,\n        sourceAudio,\n        episodeProgress: 0\n      }]);\n    }\n\n    return index;\n  }\n\n  const toNextEpisode = () => {\n    setIsPlaying(false);\n\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.episodes.length - 1);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    setIsPlaying(false);\n    isReady.current = false;\n\n    if (episodeIndex < episodes.episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    findPersistIndex();\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        setIsPlaying(false);\n        toNextEpisode();\n      } else {\n        const tempUpdatedPersist = persistProgress;\n        findPersistIndex();\n        tempUpdatedPersist[persistProgressIndex].episodeProgress = audioRef.current.currentTime;\n        setPersistProgress(tempUpdatedPersist);\n        setRemainingTime(remaining);\n        setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n      }\n    }, [1000]);\n  };\n\n  const onScrub = value => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    const tempUpdatedPersist = persistProgress;\n    tempUpdatedPersist[persistProgressIndex].episodeProgress = value;\n    setRemainingTime(remaining);\n    setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n    setPersistProgress(tempUpdatedPersist);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    const trackUpdateRemaining = duration ? new Date((duration - episodeProgress) * 1000).toISOString().slice(11, 19) : \"\";\n    const tempRunTime = duration ? new Date(duration * 1000).toISOString().slice(11, -5) : \"Ready\";\n    setRemainingTime(trackUpdateRemaining);\n    console.log(tempRunTime);\n    setRunTime(tempRunTime);\n  }, [duration]);\n  useEffect(() => {\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime = persistProgress[checkIndex].episodeProgress;\n    }\n  }, [episodeIndex, audioRef.current]);\n  useEffect(() => {\n    setRunTime(tempRunTime);\n\n    if (isPlaying) {\n      audioRef.current.play();\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  });\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  });\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n  }, [playbackRate]);\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio);\n    setPlaybackRate(1);\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime = persistProgress[checkIndex].episodeProgress;\n      setRunTime(tempRunTime);\n    }\n\n    findPersistIndex();\n\n    if (isReady.current) {\n      audioRef.current.pause();\n      setIsPlaying(false);\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes.episodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"podcast-player\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"podcast-player-inner\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"episode-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"episode-poster\",\n          src: episodeImage,\n          alt: `Poster for ${title} episode by ${author}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"episode-title\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"author-text\",\n          children: author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          value: episodeProgress,\n          step: \"1\",\n          min: \"0\",\n          max: duration ? duration : `${duration}`,\n          className: \"progress\",\n          onChange: e => onScrub(e.target.value),\n          onMouseUp: onScrubEnd,\n          onKeyUp: onScrubEnd,\n          style: {\n            background: trackStyling\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"runtime-display\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: remainingTime ? remainingTime : \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: runTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AudioControls, {\n          isPlaying: isPlaying,\n          onPrevClick: toPrevEpisode,\n          onNextClick: toNextEpisode,\n          onPlayPauseClick: setIsPlaying,\n          showNextButton: episodeIndex != 0,\n          changeSpeed: setPlaybackRate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"playback speed: \", playbackRate, \"x\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AudioPlayer, \"R0efxvMn2AcKl7iyNcP/vNUst+A=\");\n\n_c = AudioPlayer;\nexport default AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AudioControls","AudioPlayer","episodes","episodeIndex","setEpisodeIndex","episodeProgress","setEpisodeProgress","isPlaying","setIsPlaying","remainingTime","setRemainingTime","runTime","setRunTime","playbackRate","setPlaybackRate","persistProgressIndex","setPersistProgressIndex","Number","persistProgress","setPersistProgress","title","author","episodeImage","sourceAudio","audioRef","Audio","intervalRef","isReady","duration","current","currentPercentage","tempRunTime","Date","toISOString","slice","console","log","trackStyling","findPersistIndex","index","findIndex","object","toNextEpisode","length","toPrevEpisode","startTimer","clearInterval","setInterval","ended","tempUpdatedPersist","currentTime","remaining","onScrub","value","onScrubEnd","trackUpdateRemaining","checkIndex","undefined","play","pause","e","target","background"],"sources":["/home/jbrooks/Documents/School/otherProjects/Podcast-App/podcast-app/src/AudioPlayer.jsx"],"sourcesContent":["import \"./App.css\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport AudioControls from \"./AudoControls\";\n\nfunction AudioPlayer(episodes) {\n  const [episodeIndex, setEpisodeIndex] = useState(0);\n  const [episodeProgress, setEpisodeProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [remainingTime, setRemainingTime] = useState(0);\n  const [runTime, setRunTime] = useState(0);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [persistProgressIndex, setPersistProgressIndex] = useState(Number);\n  const [persistProgress, setPersistProgress] = useState([]);\n\n  let { title, author, episodeImage, sourceAudio } =\n    episodes.episodes[episodeIndex];\n\n  const audioRef = useRef(new Audio(sourceAudio));\n  const intervalRef = useRef();\n  const isReady = useRef(false);\n\n  const { duration } = audioRef.current;\n  const currentPercentage = duration\n    ? `${(episodeProgress / duration) * 100}%`\n    : \"0%\";\n\n  const tempRunTime = duration\n    ? new Date(duration * 1000).toISOString().slice(11, -5)\n    : \"Ready\";\n  console.log(tempRunTime);\n\n  const trackStyling = `\n    -webkit-gradient(linear, 0% 0%, 100% 0%, color-stop(${currentPercentage}, #777), color-stop(${currentPercentage}, #FFF))\n  `;\n\n  function findPersistIndex() {\n    const index = persistProgress.findIndex((object) => {\n      return object.sourceAudio === sourceAudio;\n    });\n\n    setPersistProgressIndex(index);\n\n    if (index == -1) {\n      setPersistProgress([\n        ...persistProgress,\n        { title, author, episodeImage, sourceAudio, episodeProgress: 0 },\n      ]);\n    }\n\n    return index;\n  }\n\n  const toNextEpisode = () => {\n    setIsPlaying(false);\n\n    if (episodeIndex - 1 < 0) {\n      setEpisodeIndex(episodes.episodes.length - 1);\n    } else {\n      setEpisodeIndex(episodeIndex - 1);\n    }\n  };\n\n  const toPrevEpisode = () => {\n    setIsPlaying(false);\n\n    isReady.current = false;\n\n    if (episodeIndex < episodes.episodes.length - 1) {\n      setEpisodeIndex(episodeIndex + 1);\n    } else {\n      setEpisodeIndex(0);\n    }\n  };\n\n  const startTimer = () => {\n    clearInterval(intervalRef.current);\n    findPersistIndex();\n\n    intervalRef.current = setInterval(() => {\n      if (audioRef.current.ended) {\n        setIsPlaying(false);\n        toNextEpisode();\n      } else {\n        const tempUpdatedPersist = persistProgress;\n        findPersistIndex();\n        tempUpdatedPersist[persistProgressIndex].episodeProgress =\n          audioRef.current.currentTime;\n        setPersistProgress(tempUpdatedPersist);\n\n        setRemainingTime(remaining);\n        setEpisodeProgress(\n          persistProgress[persistProgressIndex].episodeProgress\n        );\n      }\n    }, [1000]);\n  };\n\n  const onScrub = (value) => {\n    clearInterval(intervalRef.current);\n    audioRef.current.currentTime = value;\n    const tempUpdatedPersist = persistProgress;\n    tempUpdatedPersist[persistProgressIndex].episodeProgress = value;\n    setRemainingTime(remaining);\n    setEpisodeProgress(persistProgress[persistProgressIndex].episodeProgress);\n\n    setPersistProgress(tempUpdatedPersist);\n  };\n\n  const onScrubEnd = () => {\n    if (!isPlaying) {\n      setIsPlaying(true);\n    }\n\n    startTimer();\n  };\n\n  useEffect(() => {\n    const trackUpdateRemaining = duration\n      ? new Date((duration - episodeProgress) * 1000)\n          .toISOString()\n          .slice(11, 19)\n      : \"\";\n\n    const tempRunTime = duration\n      ? new Date(duration * 1000).toISOString().slice(11, -5)\n      : \"Ready\";\n\n    setRemainingTime(trackUpdateRemaining);\n    console.log(tempRunTime);\n    setRunTime(tempRunTime);\n  }, [duration]);\n\n  useEffect(() => {\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime =\n        persistProgress[checkIndex].episodeProgress;\n    }\n  }, [episodeIndex, audioRef.current]);\n\n  useEffect(() => {\n    setRunTime(tempRunTime);\n    if (isPlaying) {\n      audioRef.current.play();\n\n      startTimer();\n    } else {\n      audioRef.current.pause();\n    }\n  });\n\n  useEffect(() => {\n    return () => {\n      audioRef.current.pause();\n      clearInterval(intervalRef.current);\n    };\n  });\n\n  useEffect(() => {\n    audioRef.current.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    audioRef.current.pause();\n    audioRef.current = new Audio(sourceAudio);\n    setPlaybackRate(1);\n\n    const checkIndex = findPersistIndex();\n\n    if (checkIndex != -1 && checkIndex != undefined) {\n      setPersistProgressIndex(checkIndex);\n      audioRef.current.currentTime =\n        persistProgress[checkIndex].episodeProgress;\n      setRunTime(tempRunTime);\n    }\n\n    findPersistIndex();\n\n    if (isReady.current) {\n      audioRef.current.pause();\n      setIsPlaying(false);\n\n      startTimer();\n    } else {\n      isReady.current = true;\n    }\n  }, [episodeIndex, episodes.episodes]);\n\n  return (\n    <div className=\"podcast-player\">\n      <div className=\"podcast-player-inner\">\n        <div className=\"episode-info\">\n          <img\n            className=\"episode-poster\"\n            src={episodeImage}\n            alt={`Poster for ${title} episode by ${author}`}\n          />\n          <h3 className=\"episode-title\">{title}</h3>\n          <h3 className=\"author-text\">{author}</h3>\n\n          <input\n            type=\"range\"\n            value={episodeProgress}\n            step=\"1\"\n            min=\"0\"\n            max={duration ? duration : `${duration}`}\n            className=\"progress\"\n            onChange={(e) => onScrub(e.target.value)}\n            onMouseUp={onScrubEnd}\n            onKeyUp={onScrubEnd}\n            style={{ background: trackStyling }}\n          />\n          <div className=\"runtime-display\">\n            <p>{remainingTime ? remainingTime : \"\"}</p>\n            <p>{runTime}</p>\n          </div>\n          <AudioControls\n            isPlaying={isPlaying}\n            onPrevClick={toPrevEpisode}\n            onNextClick={toNextEpisode}\n            onPlayPauseClick={setIsPlaying}\n            showNextButton={episodeIndex != 0}\n            changeSpeed={setPlaybackRate}\n          />\n          <p>playback speed: {playbackRate}x</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AudioPlayer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}